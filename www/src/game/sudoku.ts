import * as wasm from 'luke-doku-rust';
import {Grid, ReadonlyGrid} from './grid';
import {Loc} from './loc';
import {CluesString, dateString, DateString} from './types';

/**
 * The largest number of puzzle locations that don't conform to a symmetry
 * we'll still count as matching it.
 */
const MAX_NONCONFORMING_LOCS = 8;

/**
 * Describes a Sudoku puzzle.
 */
export class Sudoku {
  constructor(
    readonly clues: ReadonlyGrid,
    /** All the solutions to the given clues. */
    readonly solutions: readonly ReadonlyGrid[],
    /** The possibly multiple ways that the clues conform to grid symmetries. */
    readonly symmetryMatches: readonly SymMatch[],
    /** If it's a puzzle generated by Luke-doku, its ID. */
    readonly id?: PuzzleId,
    /** If it's a puzzle imported from elsewhere, a description of where it comes from. */
    readonly source?: string,
  ) {}

  cluesString(): CluesString {
    return this.clues.toFlatString();
  }

  static fromWasm(puzzle: wasm.Puzzle, source?: string): Sudoku {
    return new Sudoku(
      new Grid(puzzle.clues),
      puzzle.solutions.map(s => new Grid(s)),
      Sudoku.bestSymmetryMatches(puzzle.clues),
      PuzzleId.fromGenOpts(puzzle.gen_opts),
      source,
    );
  }

  /** Returns an array of symmetry matches for this grid. */
  private static bestSymmetryMatches(clues: wasm.Grid): SymMatch[] {
    return wasm
      .bestSymmetryMatches(clues, MAX_NONCONFORMING_LOCS)
      .map(([sym, match]: [wasm.Sym, WasmSymMatch]) => ({
        sym,
        fullOrbits: match.full_orbits.map(orbitToLocs),
        numNonconformingLocs: match.num_nonconforming_locs,
        partialOrbits: match.partial_orbits.map(orbitToLocs),
      }));
  }
}

/**
 * Identifies a Luke-doku generated puzzle.
 */
export class PuzzleId {
  constructor(
    readonly date: DateString,
    readonly counter: number,
  ) {}

  static fromGenOpts(genOpts?: wasm.GenOpts): PuzzleId | undefined {
    return (
      genOpts &&
      new PuzzleId(dateString(genOpts.daily_solution.date), genOpts.counter)
    );
  }
}

/**
 * The wasm code matches the possible symmetries of the Sudoku board against the
 * clues of a given puzzle to produce one or more of these objects.
 */
export declare interface SymMatch {
  readonly sym: wasm.Sym;
  readonly fullOrbits: Loc[][];
  readonly numNonconformingLocs: number;
  readonly partialOrbits: Loc[][];
}

/**
 * This is the interface of the match objects returned from Rust.
 */
declare interface WasmSymMatch {
  full_orbits: number[][];
  num_nonconforming_locs: number;
  partial_orbits: number[][];
}

function orbitToLocs(orbit: number[]): Loc[] {
  return orbit.map(loc => Loc.of(loc));
}
